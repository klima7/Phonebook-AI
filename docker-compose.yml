name: phonebook

services:

  redis:
    image: redis:latest
    restart: always
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 3s
      retries: 3

  django-database:
    image: postgres:17
    restart: always
    shm_size: 1000gb
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    volumes:
      - ./data/django_database:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U user -d postgres -h 127.0.0.1
      interval: 5s
      retries: 3

  langgraph-database:
    image: postgres:17
    restart: always
    shm_size: 1000gb
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    volumes:
      - ./data/langgraph_database:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U user -d postgres -h 127.0.0.1
      interval: 5s
      retries: 3

  weaviate:
    image: semitechnologies/weaviate:1.30.7
    restart: on-failure:0
    volumes:
      - ./data/weaviate:/var/lib/weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'

  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      django-database:
        condition: service_healthy
      langgraph-database:
        condition: service_healthy

  worker:
    build:
      context: backend
      dockerfile: Dockerfile
    command: poetry run -- watchmedo auto-restart --directory=/app --pattern=*.py --recursive --signal=SIGKILL -- poetry run celery -A phonebook worker
    restart: always
    volumes:
      - ./backend:/app
    env_file:
      - .env
    healthcheck:
      test: poetry run celery -A phonebook inspect ping
      interval: 5s
      retries: 6
    depends_on:
      django-database:
        condition: service_healthy
      langgraph-database:
        condition: service_healthy
      redis:
        condition: service_healthy

  flower:
    build:
      context: backend
      dockerfile: Dockerfile
    command: poetry run -- watchmedo auto-restart --directory=/app --pattern=*.py --recursive --signal=SIGKILL -- poetry run celery -A phonebook flower --url_prefix=/tasks
    restart: always
    volumes:
      - ./backend:/app
    env_file:
      - .env
    healthcheck:
      test: poetry run celery -A phonebook inspect ping
      interval: 5s
      retries: 6
    depends_on:
      django-database:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    restart: always
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/app

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
